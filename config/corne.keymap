/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/outputs.h>

/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
    
        keymap {
                compatible = "zmk,keymap";

                default_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U  |  I  |  O  |  P  | BKSP |
// | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J  |  K  |  L  |  ;  |  '   |
// | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M  |  ,  |  .  |  /  | ESC  |
//                    | ALT | GUI | SPC |   | ENT | RSE | LWR |  
                        bindings = <
   &kp TAB   &kp Q &kp W &kp E &kp R &kp T   &kp Y &kp U  &kp I     &kp O   &kp P    &kp BSPC
   &kp LCTRL &kp A &kp S &kp D &kp F &kp G   &kp H &kp J  &kp K     &kp L   &kp SEMI &kp SQT
   &kp LSHFT &kp Z &kp X &kp C &kp V &kp B   &kp N &kp M  &kp COMMA &kp DOT &kp FSLH &kp ESC
                  &kp RALT &kp LGUI &kp SPACE   &kp RET &mo 2 &mo 1 
                        >;
                };
                lower_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
// |      |     |     |     |     |     |   | LFT | DWN |  UP | RGT |     |      |
// | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
//                    | ALT | GUI | SPC |   | ENT |     |     |
                        bindings = <
   &kp TAB   &kp N1 &kp N2 &kp N3   &kp N4 &kp N5     &kp N6   &kp N7   &kp N8   &kp N9    &kp N0 &kp BSPC
   &trans    &trans &trans &trans   &trans &trans     &kp LEFT &kp DOWN &kp UP   &kp RIGHT &trans &trans
   &kp LSHFT &trans &trans &trans   &trans &trans     &trans   &trans   &trans   &trans    &trans &trans
                         &kp RALT &kp LGUI &kp SPACE  &kp RET  &trans   &trans
                        >;
                };

                raise_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | DEL |
// | CTRL |  1  |  2  |  3  |  4  |  5  |   |  -  |  =  |  [  |  ]  |  \  |  `  |
// | SHFT |  6  |  7  |  8  |  9  |  0  |   |  _  |  +  |  {  |  }  | "|" |  ~  |
//                    | ALT | GUI | SPC |   | ENT |     |     |
                        bindings = <
   &kp  TAB  &kp EXCL &kp AT &kp HASH &kp DLLR &kp PRCNT   &kp CARET &kp AMPS  &kp KP_MULTIPLY &kp LPAR &kp RPAR &kp DEL
   &kp LCTRL &kp N1   &kp N2 &kp N3   &kp N4   &kp N5      &kp MINUS &kp EQUAL &kp LBKT        &kp RBKT &kp BSLH &kp GRAVE
   &kp LSHFT &kp N6   &kp N7 &kp N8   &kp N9   &kp N0      &kp UNDER &kp PLUS  &kp LBRC        &kp RBRC &kp PIPE &kp TILDE
                    	     &kp RALT &kp LGUI &kp SPACE   &kp RET  &trans   &trans
                        >;
                };
                
                ctrl_layer {
// -----------------------------------------------------------------------------------------
// |  TOG | BLE | USB |     |     |      |   |     |     |     |     |     |     |
// |  BT1 | BT2 | BT3 | BT4 | BT5 | BTCLR|   |     |     |     |     |     |     |
// | SHFT |     |     |     |     | OFF  |   |     |     |     |     |     |     |
//                    | ALT | GUI | SPC  |   | ENT |     |     |
                        bindings = <
   &out OUT_TOG &out OUT_BLE &out OUT_USB &trans       &trans       &trans            &trans &trans &trans &trans &trans &trans
   &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4 &bt BT_CLR        &trans &trans &trans &trans &trans &trans
   &kp LSHFT    &trans       &trans       &trans       &trans       &soft_off         &trans &trans &trans &trans &trans &trans
                    	                  &kp RALT     &kp LGUI     &kp SPACE         &kp RET  &trans   &trans
                        >;
                };
        };
};
